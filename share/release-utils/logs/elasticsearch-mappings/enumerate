#!/usr/bin/env ruby

require 'json'
require 'yaml'

release_name = YAML.load_file('config/final.yml')['final_name']

confs = {}

ARGV.each do | argv |
  if '--active' == argv
    Dir.glob("jobs/**/templates/logsearch/logs.yml").each do | logfile |
      job_name = File.basename(File.dirname(File.dirname(File.dirname(logfile))))

      logyaml = YAML.load_file(logfile)

      logyaml['files'].each do | joblogfile, joblogconfig |
        if !joblogconfig.has_key? 'fields' or !joblogconfig['fields'].has_key? 'type'
          $stderr.puts "WARNING: #{joblogfile} from job #{job_name} does not define a type field"

          next
        end

        fulltype = joblogconfig['fields']['type']

        if !fulltype.match(/^#{release_name}-(.+)$/)
          $stderr.puts "WARNING: #{joblogfile} from job #{job_name} is typed #{fulltype} which is not part of this release"

          next
        elsif !fulltype.match(/^#{release_name}-#{job_name}-(.+)$/)
          $stderr.puts "WARNING: #{joblogfile} from job #{job_name} is typed #{fulltype} which is not part of this job"

          next
        end

        log_name = fulltype.gsub(/^#{release_name}-#{job_name}-(.+)$/, '\1')

        joblogconf = "#{File.dirname(logfile)}/../../logsearch/logs/#{log_name}/elasticsearch-mapping.json"

        if !File.exists?(joblogconf)
          $stderr.puts "WARNING: #{joblogfile} from job #{job_name} is typed #{fulltype} which could not be found"

          next
        end

        confs["#{release_name}-#{job_name}-#{log_name}"] = File.realpath(joblogconf)
      end
    end
  elsif '--all' == argv
    Dir.glob("jobs/**/logsearch/logs/*/elasticsearch-mapping.json").each do | joblogconf |
      log_name = File.basename(File.dirname(joblogconf))
      job_name = File.basename(File.dirname(File.dirname(File.dirname(File.dirname(joblogconf)))))

      confs["#{release_name}-#{job_name}-#{log_name}"] = File.realpath(joblogconf)
    end
  else
    split = argv.split('=', 2)

    if File.exists? split[1]
      confs[split[0]] = File.realpath(split[1])
    else
      $stderr.puts "WARNING: #{split[1]} passed in argument but not found on filesystem"
    end
  end
end

confs.each do | name, path |
  $stdout.puts "#{name}\t#{path}"
end
